//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""LandMovement"",
            ""id"": ""d6ce8af8-86bc-4dc1-b5a9-2a8f002646db"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fc5a0f2e-3d03-4225-acdf-a94eb1a9fa3f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""2f72bcec-3e5a-49da-9fe9-b8a629d4caa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ccff87ce-2cc2-41b2-998a-be758f8809c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""fc150cd6-f2e8-4c30-ac7b-b4f57dd4b8cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8f719564-bb26-495b-85b4-5024055110f2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5fe53060-5a5f-4d01-9466-34c11374a3cd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b73ac35-0450-4dc1-850a-086362c4f141"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2929b3b5-84c4-4f40-a1a5-d597b98def63"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aab01cf5-d1cc-45b5-87c5-a6687616802b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cbf8d695-c052-489d-a7b3-a821fe6366f1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ce7577e-fbdc-4298-b03c-1eee602a69a4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d4b12a6-9d07-4e33-9a9b-55810c82c887"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d95d8402-b1cb-44ae-b1a5-7c1a05de5295"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90a31dd1-9675-4f23-9aa7-87e388634a33"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""555dc81e-68cb-43a7-9a9e-97328ba3ec94"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1739b03-7db2-4860-9f10-37a3f9114a71"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AllTerain"",
            ""id"": ""91fe7c24-bcaf-411a-9c3f-7420e5ba508a"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""feadc77a-19d5-40fe-81d1-d993914aea59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeForm"",
                    ""type"": ""Button"",
                    ""id"": ""7e700cfb-594d-4fc0-91e2-afb499b1b881"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98922948-0bb6-4667-9f4c-582a13396d0d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d32f4ad7-e39d-4bab-b7ea-1ca2dd09565f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d29c2a58-0452-40b0-a3e7-f9297de5c01e"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeForm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b71d595c-59df-40cb-abbd-3cf525e2d655"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeForm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KiteMovement"",
            ""id"": ""fc5e57f1-e8e0-4c9d-ba46-0b2f8154c4ea"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""b30e2054-53dd-440b-bee7-8f38993417c0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""e216e0b5-66fa-4f54-8d2a-a4bbc77ea203"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""516a60f4-8090-4b81-b08c-e6460bd7bd31"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2020bbce-b5fe-4f98-9a80-a39b554a0660"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GamePad"",
                    ""id"": ""00cb5862-49f5-4784-9955-adf773649f77"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dcffc3c6-cb35-4e56-9142-ee02514da7fa"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""230b4367-d25f-4a64-8b1d-c539b231d69d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""GlobleKeys"",
            ""id"": ""f92b7608-378a-4bc3-bca4-10561acf8644"",
            ""actions"": [
                {
                    ""name"": ""Pause/Unpause"",
                    ""type"": ""Button"",
                    ""id"": ""866a63a1-52ff-4724-8fde-e1480669bf77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29fa4c06-df69-4796-96cf-3a2bd058d404"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause/Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d12ce362-15b9-4488-abed-4cc24df6c029"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause/Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LandMovement
        m_LandMovement = asset.FindActionMap("LandMovement", throwIfNotFound: true);
        m_LandMovement_Move = m_LandMovement.FindAction("Move", throwIfNotFound: true);
        m_LandMovement_Sprint = m_LandMovement.FindAction("Sprint", throwIfNotFound: true);
        m_LandMovement_Jump = m_LandMovement.FindAction("Jump", throwIfNotFound: true);
        m_LandMovement_Attack = m_LandMovement.FindAction("Attack", throwIfNotFound: true);
        // AllTerain
        m_AllTerain = asset.FindActionMap("AllTerain", throwIfNotFound: true);
        m_AllTerain_Interact = m_AllTerain.FindAction("Interact", throwIfNotFound: true);
        m_AllTerain_ChangeForm = m_AllTerain.FindAction("ChangeForm", throwIfNotFound: true);
        // KiteMovement
        m_KiteMovement = asset.FindActionMap("KiteMovement", throwIfNotFound: true);
        m_KiteMovement_Horizontal = m_KiteMovement.FindAction("Horizontal", throwIfNotFound: true);
        // GlobleKeys
        m_GlobleKeys = asset.FindActionMap("GlobleKeys", throwIfNotFound: true);
        m_GlobleKeys_PauseUnpause = m_GlobleKeys.FindAction("Pause/Unpause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LandMovement
    private readonly InputActionMap m_LandMovement;
    private ILandMovementActions m_LandMovementActionsCallbackInterface;
    private readonly InputAction m_LandMovement_Move;
    private readonly InputAction m_LandMovement_Sprint;
    private readonly InputAction m_LandMovement_Jump;
    private readonly InputAction m_LandMovement_Attack;
    public struct LandMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public LandMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_LandMovement_Move;
        public InputAction @Sprint => m_Wrapper.m_LandMovement_Sprint;
        public InputAction @Jump => m_Wrapper.m_LandMovement_Jump;
        public InputAction @Attack => m_Wrapper.m_LandMovement_Attack;
        public InputActionMap Get() { return m_Wrapper.m_LandMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LandMovementActions set) { return set.Get(); }
        public void SetCallbacks(ILandMovementActions instance)
        {
            if (m_Wrapper.m_LandMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnSprint;
                @Jump.started -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_LandMovementActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_LandMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public LandMovementActions @LandMovement => new LandMovementActions(this);

    // AllTerain
    private readonly InputActionMap m_AllTerain;
    private IAllTerainActions m_AllTerainActionsCallbackInterface;
    private readonly InputAction m_AllTerain_Interact;
    private readonly InputAction m_AllTerain_ChangeForm;
    public struct AllTerainActions
    {
        private @PlayerInputActions m_Wrapper;
        public AllTerainActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_AllTerain_Interact;
        public InputAction @ChangeForm => m_Wrapper.m_AllTerain_ChangeForm;
        public InputActionMap Get() { return m_Wrapper.m_AllTerain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AllTerainActions set) { return set.Get(); }
        public void SetCallbacks(IAllTerainActions instance)
        {
            if (m_Wrapper.m_AllTerainActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_AllTerainActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_AllTerainActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_AllTerainActionsCallbackInterface.OnInteract;
                @ChangeForm.started -= m_Wrapper.m_AllTerainActionsCallbackInterface.OnChangeForm;
                @ChangeForm.performed -= m_Wrapper.m_AllTerainActionsCallbackInterface.OnChangeForm;
                @ChangeForm.canceled -= m_Wrapper.m_AllTerainActionsCallbackInterface.OnChangeForm;
            }
            m_Wrapper.m_AllTerainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @ChangeForm.started += instance.OnChangeForm;
                @ChangeForm.performed += instance.OnChangeForm;
                @ChangeForm.canceled += instance.OnChangeForm;
            }
        }
    }
    public AllTerainActions @AllTerain => new AllTerainActions(this);

    // KiteMovement
    private readonly InputActionMap m_KiteMovement;
    private IKiteMovementActions m_KiteMovementActionsCallbackInterface;
    private readonly InputAction m_KiteMovement_Horizontal;
    public struct KiteMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public KiteMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_KiteMovement_Horizontal;
        public InputActionMap Get() { return m_Wrapper.m_KiteMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KiteMovementActions set) { return set.Get(); }
        public void SetCallbacks(IKiteMovementActions instance)
        {
            if (m_Wrapper.m_KiteMovementActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_KiteMovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_KiteMovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_KiteMovementActionsCallbackInterface.OnHorizontal;
            }
            m_Wrapper.m_KiteMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
            }
        }
    }
    public KiteMovementActions @KiteMovement => new KiteMovementActions(this);

    // GlobleKeys
    private readonly InputActionMap m_GlobleKeys;
    private IGlobleKeysActions m_GlobleKeysActionsCallbackInterface;
    private readonly InputAction m_GlobleKeys_PauseUnpause;
    public struct GlobleKeysActions
    {
        private @PlayerInputActions m_Wrapper;
        public GlobleKeysActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseUnpause => m_Wrapper.m_GlobleKeys_PauseUnpause;
        public InputActionMap Get() { return m_Wrapper.m_GlobleKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobleKeysActions set) { return set.Get(); }
        public void SetCallbacks(IGlobleKeysActions instance)
        {
            if (m_Wrapper.m_GlobleKeysActionsCallbackInterface != null)
            {
                @PauseUnpause.started -= m_Wrapper.m_GlobleKeysActionsCallbackInterface.OnPauseUnpause;
                @PauseUnpause.performed -= m_Wrapper.m_GlobleKeysActionsCallbackInterface.OnPauseUnpause;
                @PauseUnpause.canceled -= m_Wrapper.m_GlobleKeysActionsCallbackInterface.OnPauseUnpause;
            }
            m_Wrapper.m_GlobleKeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseUnpause.started += instance.OnPauseUnpause;
                @PauseUnpause.performed += instance.OnPauseUnpause;
                @PauseUnpause.canceled += instance.OnPauseUnpause;
            }
        }
    }
    public GlobleKeysActions @GlobleKeys => new GlobleKeysActions(this);
    public interface ILandMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IAllTerainActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnChangeForm(InputAction.CallbackContext context);
    }
    public interface IKiteMovementActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
    }
    public interface IGlobleKeysActions
    {
        void OnPauseUnpause(InputAction.CallbackContext context);
    }
}
